// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testdraganddrop.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class Detail
{
	private final IMendixObject detailMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "TestDragAndDrop.Detail";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		SequenceNumber("SequenceNumber"),
		Detail_Header("TestDragAndDrop.Detail_Header"),
		Detail_Item("TestDragAndDrop.Detail_Item");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public Detail(IContext context)
	{
		this(context, Core.instantiate(context, "TestDragAndDrop.Detail"));
	}

	protected Detail(IContext context, IMendixObject detailMendixObject)
	{
		if (detailMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("TestDragAndDrop.Detail", detailMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a TestDragAndDrop.Detail");

		this.detailMendixObject = detailMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Detail.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static testdraganddrop.proxies.Detail initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return testdraganddrop.proxies.Detail.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static testdraganddrop.proxies.Detail initialize(IContext context, IMendixObject mendixObject)
	{
		return new testdraganddrop.proxies.Detail(context, mendixObject);
	}

	public static testdraganddrop.proxies.Detail load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return testdraganddrop.proxies.Detail.initialize(context, mendixObject);
	}

	public static java.util.List<testdraganddrop.proxies.Detail> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<testdraganddrop.proxies.Detail> result = new java.util.ArrayList<testdraganddrop.proxies.Detail>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//TestDragAndDrop.Detail" + xpathConstraint))
			result.add(testdraganddrop.proxies.Detail.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of SequenceNumber
	 */
	public final Integer getSequenceNumber()
	{
		return getSequenceNumber(getContext());
	}

	/**
	 * @param context
	 * @return value of SequenceNumber
	 */
	public final Integer getSequenceNumber(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.SequenceNumber.toString());
	}

	/**
	 * Set value of SequenceNumber
	 * @param sequencenumber
	 */
	public final void setSequenceNumber(Integer sequencenumber)
	{
		setSequenceNumber(getContext(), sequencenumber);
	}

	/**
	 * Set value of SequenceNumber
	 * @param context
	 * @param sequencenumber
	 */
	public final void setSequenceNumber(IContext context, Integer sequencenumber)
	{
		getMendixObject().setValue(context, MemberNames.SequenceNumber.toString(), sequencenumber);
	}

	/**
	 * @return value of Detail_Header
	 */
	public final testdraganddrop.proxies.Header getDetail_Header() throws CoreException
	{
		return getDetail_Header(getContext());
	}

	/**
	 * @param context
	 * @return value of Detail_Header
	 */
	public final testdraganddrop.proxies.Header getDetail_Header(IContext context) throws CoreException
	{
		testdraganddrop.proxies.Header result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Detail_Header.toString());
		if (identifier != null)
			result = testdraganddrop.proxies.Header.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Detail_Header
	 * @param detail_header
	 */
	public final void setDetail_Header(testdraganddrop.proxies.Header detail_header)
	{
		setDetail_Header(getContext(), detail_header);
	}

	/**
	 * Set value of Detail_Header
	 * @param context
	 * @param detail_header
	 */
	public final void setDetail_Header(IContext context, testdraganddrop.proxies.Header detail_header)
	{
		if (detail_header == null)
			getMendixObject().setValue(context, MemberNames.Detail_Header.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Detail_Header.toString(), detail_header.getMendixObject().getId());
	}

	/**
	 * @return value of Detail_Item
	 */
	public final testdraganddrop.proxies.Item getDetail_Item() throws CoreException
	{
		return getDetail_Item(getContext());
	}

	/**
	 * @param context
	 * @return value of Detail_Item
	 */
	public final testdraganddrop.proxies.Item getDetail_Item(IContext context) throws CoreException
	{
		testdraganddrop.proxies.Item result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Detail_Item.toString());
		if (identifier != null)
			result = testdraganddrop.proxies.Item.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Detail_Item
	 * @param detail_item
	 */
	public final void setDetail_Item(testdraganddrop.proxies.Item detail_item)
	{
		setDetail_Item(getContext(), detail_item);
	}

	/**
	 * Set value of Detail_Item
	 * @param context
	 * @param detail_item
	 */
	public final void setDetail_Item(IContext context, testdraganddrop.proxies.Item detail_item)
	{
		if (detail_item == null)
			getMendixObject().setValue(context, MemberNames.Detail_Item.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Detail_Item.toString(), detail_item.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return detailMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testdraganddrop.proxies.Detail that = (testdraganddrop.proxies.Detail) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "TestDragAndDrop.Detail";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
