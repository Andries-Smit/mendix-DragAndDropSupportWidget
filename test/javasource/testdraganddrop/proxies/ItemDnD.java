// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testdraganddrop.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class ItemDnD
{
	private final IMendixObject itemDnDMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "TestDragAndDrop.ItemDnD";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ItemDnD_Item_Dragged("TestDragAndDrop.ItemDnD_Item_Dragged"),
		ItemDnD_Item_DropTarget("TestDragAndDrop.ItemDnD_Item_DropTarget");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public ItemDnD(IContext context)
	{
		this(context, Core.instantiate(context, "TestDragAndDrop.ItemDnD"));
	}

	protected ItemDnD(IContext context, IMendixObject itemDnDMendixObject)
	{
		if (itemDnDMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("TestDragAndDrop.ItemDnD", itemDnDMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a TestDragAndDrop.ItemDnD");

		this.itemDnDMendixObject = itemDnDMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'ItemDnD.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static testdraganddrop.proxies.ItemDnD initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return testdraganddrop.proxies.ItemDnD.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static testdraganddrop.proxies.ItemDnD initialize(IContext context, IMendixObject mendixObject)
	{
		return new testdraganddrop.proxies.ItemDnD(context, mendixObject);
	}

	public static testdraganddrop.proxies.ItemDnD load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return testdraganddrop.proxies.ItemDnD.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of ItemDnD_Item_Dragged
	 */
	public final testdraganddrop.proxies.Item getItemDnD_Item_Dragged() throws CoreException
	{
		return getItemDnD_Item_Dragged(getContext());
	}

	/**
	 * @param context
	 * @return value of ItemDnD_Item_Dragged
	 */
	public final testdraganddrop.proxies.Item getItemDnD_Item_Dragged(IContext context) throws CoreException
	{
		testdraganddrop.proxies.Item result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ItemDnD_Item_Dragged.toString());
		if (identifier != null)
			result = testdraganddrop.proxies.Item.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ItemDnD_Item_Dragged
	 * @param itemdnd_item_dragged
	 */
	public final void setItemDnD_Item_Dragged(testdraganddrop.proxies.Item itemdnd_item_dragged)
	{
		setItemDnD_Item_Dragged(getContext(), itemdnd_item_dragged);
	}

	/**
	 * Set value of ItemDnD_Item_Dragged
	 * @param context
	 * @param itemdnd_item_dragged
	 */
	public final void setItemDnD_Item_Dragged(IContext context, testdraganddrop.proxies.Item itemdnd_item_dragged)
	{
		if (itemdnd_item_dragged == null)
			getMendixObject().setValue(context, MemberNames.ItemDnD_Item_Dragged.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ItemDnD_Item_Dragged.toString(), itemdnd_item_dragged.getMendixObject().getId());
	}

	/**
	 * @return value of ItemDnD_Item_DropTarget
	 */
	public final testdraganddrop.proxies.Item getItemDnD_Item_DropTarget() throws CoreException
	{
		return getItemDnD_Item_DropTarget(getContext());
	}

	/**
	 * @param context
	 * @return value of ItemDnD_Item_DropTarget
	 */
	public final testdraganddrop.proxies.Item getItemDnD_Item_DropTarget(IContext context) throws CoreException
	{
		testdraganddrop.proxies.Item result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ItemDnD_Item_DropTarget.toString());
		if (identifier != null)
			result = testdraganddrop.proxies.Item.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ItemDnD_Item_DropTarget
	 * @param itemdnd_item_droptarget
	 */
	public final void setItemDnD_Item_DropTarget(testdraganddrop.proxies.Item itemdnd_item_droptarget)
	{
		setItemDnD_Item_DropTarget(getContext(), itemdnd_item_droptarget);
	}

	/**
	 * Set value of ItemDnD_Item_DropTarget
	 * @param context
	 * @param itemdnd_item_droptarget
	 */
	public final void setItemDnD_Item_DropTarget(IContext context, testdraganddrop.proxies.Item itemdnd_item_droptarget)
	{
		if (itemdnd_item_droptarget == null)
			getMendixObject().setValue(context, MemberNames.ItemDnD_Item_DropTarget.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ItemDnD_Item_DropTarget.toString(), itemdnd_item_droptarget.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return itemDnDMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testdraganddrop.proxies.ItemDnD that = (testdraganddrop.proxies.ItemDnD) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "TestDragAndDrop.ItemDnD";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
