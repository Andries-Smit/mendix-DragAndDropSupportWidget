// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testdraganddrop.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class HeaderDetailDnD
{
	private final IMendixObject headerDetailDnDMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "TestDragAndDrop.HeaderDetailDnD";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		isDroppedBefore("isDroppedBefore"),
		DroppedOnDetail("TestDragAndDrop.DroppedOnDetail"),
		DroppedNewItem("TestDragAndDrop.DroppedNewItem"),
		HeaderDetailDnD_Header("TestDragAndDrop.HeaderDetailDnD_Header");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public HeaderDetailDnD(IContext context)
	{
		this(context, Core.instantiate(context, "TestDragAndDrop.HeaderDetailDnD"));
	}

	protected HeaderDetailDnD(IContext context, IMendixObject headerDetailDnDMendixObject)
	{
		if (headerDetailDnDMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("TestDragAndDrop.HeaderDetailDnD", headerDetailDnDMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a TestDragAndDrop.HeaderDetailDnD");

		this.headerDetailDnDMendixObject = headerDetailDnDMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'HeaderDetailDnD.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static testdraganddrop.proxies.HeaderDetailDnD initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return testdraganddrop.proxies.HeaderDetailDnD.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static testdraganddrop.proxies.HeaderDetailDnD initialize(IContext context, IMendixObject mendixObject)
	{
		return new testdraganddrop.proxies.HeaderDetailDnD(context, mendixObject);
	}

	public static testdraganddrop.proxies.HeaderDetailDnD load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return testdraganddrop.proxies.HeaderDetailDnD.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of isDroppedBefore
	 */
	public final Boolean getisDroppedBefore()
	{
		return getisDroppedBefore(getContext());
	}

	/**
	 * @param context
	 * @return value of isDroppedBefore
	 */
	public final Boolean getisDroppedBefore(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.isDroppedBefore.toString());
	}

	/**
	 * Set value of isDroppedBefore
	 * @param isdroppedbefore
	 */
	public final void setisDroppedBefore(Boolean isdroppedbefore)
	{
		setisDroppedBefore(getContext(), isdroppedbefore);
	}

	/**
	 * Set value of isDroppedBefore
	 * @param context
	 * @param isdroppedbefore
	 */
	public final void setisDroppedBefore(IContext context, Boolean isdroppedbefore)
	{
		getMendixObject().setValue(context, MemberNames.isDroppedBefore.toString(), isdroppedbefore);
	}

	/**
	 * @return value of DroppedOnDetail
	 */
	public final testdraganddrop.proxies.Detail getDroppedOnDetail() throws CoreException
	{
		return getDroppedOnDetail(getContext());
	}

	/**
	 * @param context
	 * @return value of DroppedOnDetail
	 */
	public final testdraganddrop.proxies.Detail getDroppedOnDetail(IContext context) throws CoreException
	{
		testdraganddrop.proxies.Detail result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.DroppedOnDetail.toString());
		if (identifier != null)
			result = testdraganddrop.proxies.Detail.load(context, identifier);
		return result;
	}

	/**
	 * Set value of DroppedOnDetail
	 * @param droppedondetail
	 */
	public final void setDroppedOnDetail(testdraganddrop.proxies.Detail droppedondetail)
	{
		setDroppedOnDetail(getContext(), droppedondetail);
	}

	/**
	 * Set value of DroppedOnDetail
	 * @param context
	 * @param droppedondetail
	 */
	public final void setDroppedOnDetail(IContext context, testdraganddrop.proxies.Detail droppedondetail)
	{
		if (droppedondetail == null)
			getMendixObject().setValue(context, MemberNames.DroppedOnDetail.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.DroppedOnDetail.toString(), droppedondetail.getMendixObject().getId());
	}

	/**
	 * @return value of DroppedNewItem
	 */
	public final testdraganddrop.proxies.Item getDroppedNewItem() throws CoreException
	{
		return getDroppedNewItem(getContext());
	}

	/**
	 * @param context
	 * @return value of DroppedNewItem
	 */
	public final testdraganddrop.proxies.Item getDroppedNewItem(IContext context) throws CoreException
	{
		testdraganddrop.proxies.Item result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.DroppedNewItem.toString());
		if (identifier != null)
			result = testdraganddrop.proxies.Item.load(context, identifier);
		return result;
	}

	/**
	 * Set value of DroppedNewItem
	 * @param droppednewitem
	 */
	public final void setDroppedNewItem(testdraganddrop.proxies.Item droppednewitem)
	{
		setDroppedNewItem(getContext(), droppednewitem);
	}

	/**
	 * Set value of DroppedNewItem
	 * @param context
	 * @param droppednewitem
	 */
	public final void setDroppedNewItem(IContext context, testdraganddrop.proxies.Item droppednewitem)
	{
		if (droppednewitem == null)
			getMendixObject().setValue(context, MemberNames.DroppedNewItem.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.DroppedNewItem.toString(), droppednewitem.getMendixObject().getId());
	}

	/**
	 * @return value of HeaderDetailDnD_Header
	 */
	public final testdraganddrop.proxies.Header getHeaderDetailDnD_Header() throws CoreException
	{
		return getHeaderDetailDnD_Header(getContext());
	}

	/**
	 * @param context
	 * @return value of HeaderDetailDnD_Header
	 */
	public final testdraganddrop.proxies.Header getHeaderDetailDnD_Header(IContext context) throws CoreException
	{
		testdraganddrop.proxies.Header result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.HeaderDetailDnD_Header.toString());
		if (identifier != null)
			result = testdraganddrop.proxies.Header.load(context, identifier);
		return result;
	}

	/**
	 * Set value of HeaderDetailDnD_Header
	 * @param headerdetaildnd_header
	 */
	public final void setHeaderDetailDnD_Header(testdraganddrop.proxies.Header headerdetaildnd_header)
	{
		setHeaderDetailDnD_Header(getContext(), headerdetaildnd_header);
	}

	/**
	 * Set value of HeaderDetailDnD_Header
	 * @param context
	 * @param headerdetaildnd_header
	 */
	public final void setHeaderDetailDnD_Header(IContext context, testdraganddrop.proxies.Header headerdetaildnd_header)
	{
		if (headerdetaildnd_header == null)
			getMendixObject().setValue(context, MemberNames.HeaderDetailDnD_Header.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.HeaderDetailDnD_Header.toString(), headerdetaildnd_header.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return headerDetailDnDMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final testdraganddrop.proxies.HeaderDetailDnD that = (testdraganddrop.proxies.HeaderDetailDnD) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "TestDragAndDrop.HeaderDetailDnD";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
